{"version":3,"sources":["swregister.js"],"names":["SWService","navigator","serviceWorker","indexController","this","register","then","reg","controller","waiting","updateReady","trackInstalling","installing","addEventListener","refreshing","window","location","reload","_dbPromise","db","_postsView","showingPosts","transaction","indexedDBName","objectStore","index","getAll","messages","addPosts","reverse","worker","state","postMessage","action","swregister","registerServiceWorker"],"mappings":"iYAAMA,+HAEF,GAAKC,UAAUC,cAAf,CAEA,IAAMC,EAAkBC,KAJtBJ,UAMQE,cAAcG,SAAS,UAAUC,KAAK,SAACC,GAC1CN,UAAUC,cAAcM,aAIzBD,EAAIE,QACNN,EAAgBO,YAAYH,EAAIE,SAR9BN,EAAAA,WAaFA,EAAgBQ,gBAAgBJ,EAAIK,YARrCL,EAAAM,iBAAA,cAAA,WAaCV,EAAgBQ,gBAAgBJ,EAAIK,iBANtC,IAAAE,OAAAA,EACEX,UAAAA,cAAgBQ,iBAAgBJ,mBAAhC,WACAO,IACDC,OAAAC,SAAAC,SAaDH,GAAa,mDAKf,IAAMX,EAAkBC,KAVxB,OAAAA,KAAAc,WAAAZ,KAAA,SAAAa,GAIEJ,GAAAA,IAAOC,EAAPI,WAAAC,eAiBA,OAnBFF,EAAAG,YAAAC,eAKDC,YAAAD,eAAAE,MAAA,WAcgBC,SAASpB,KAAK,SAACqB,GAC1BxB,EAAgBiB,WAAWQ,SAbZD,EAAAE,uDAKjBC,GACA,IAAA3B,EAAAC,KACA0B,EAAAjB,iBAAWV,cAAgBiB,WAcP,aAAhBU,EAAOC,OAZX5B,EAAiBmB,YAAYC,yCAOhCO,GAaCA,EAAOE,YAAY,CACjBC,OAAQ,yBAPPC,WAAA,IAAAlC,UACFkC,WAJDC","file":"swregister.js","sourcesContent":["class SWService {\n  registerServiceWorker() {\n    if (!navigator.serviceWorker) return;\n\n    const indexController = this;\n\n    navigator.serviceWorker.register('/sw.js').then((reg) => {\n      if (!navigator.serviceWorker.controller) {\n        return;\n      }\n\n      if (reg.waiting) {\n        indexController.updateReady(reg.waiting);\n        return;\n      }\n\n      if (reg.installing) {\n        indexController.trackInstalling(reg.installing);\n        return;\n      }\n\n      reg.addEventListener('updatefound', () => {\n        indexController.trackInstalling(reg.installing);\n      });\n    });\n\n    // Ensure refresh is only called once.\n    // This works around a bug in \"force update on reload\".\n    let refreshing;\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (refreshing) return;\n      window.location.reload();\n      refreshing = true;\n    });\n  }\n\n  showCachedMessages() {\n    const indexController = this;\n\n    return this._dbPromise.then((db) => {\n      // if we're already showing posts, eg shift-refresh\n      // or the very first load, there's no point fetching\n      // posts from IDB\n      if (!db || indexController._postsView.showingPosts()) return;\n\n      const index = db.transaction(indexedDBName)\n        .objectStore(indexedDBName).index('by-date');\n\n      return index.getAll().then((messages) => {\n        indexController._postsView.addPosts(messages.reverse());\n      });\n    });\n  }\n\n  trackInstalling(worker) {\n    const indexController = this;\n    worker.addEventListener('statechange', () => {\n      if (worker.state == 'installed') {\n        indexController.updateReady(worker);\n      }\n    });\n  }\n\n\n  updateReady(worker) {\n    worker.postMessage({\n      action: 'skipWaiting',\n    });\n  }\n}\n\n\nconst swregister = new SWService();\nswregister.registerServiceWorker();\n"]}