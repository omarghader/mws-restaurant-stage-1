{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","map","window","initMap","fetchRestaurantFromURL","error","self","google","maps","Map","document","getElementById","console","center","latlng","scrollwheel","onload","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","image","responsiveImage","container","operating_hours","fillRestaurantHoursHTML","cuisine","operatingHours","fillReviewsHTML","key","row","createElement","day","time","hours","appendChild","reviews","title","noReviews","createReviewHTML","review","ul","forEach","li","date","rating","comments","currentPage","setAttribute","location","href","breadcrumb","querySelector","results","replace"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nlet map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false,\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n};\n\nwindow.onload = () => {\n  if (!window.google) {\n    fetchRestaurantFromURL((error, restaurant) => {\n      if (error) { // Got an error!\n        console.error(error);\n      } else {\n        fillBreadcrumb();\n        DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n      }\n    });\n  }\n};\n\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    const error = 'No restaurant id in URL';\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant);\n    });\n  }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  // const image = document.getElementById('restaurant-img');\n  // image.className = 'restaurant-img'\n  // image.src = DBHelper.imageUrlForRestaurant(restaurant);\n\n  const image = responsiveImage(restaurant);\n  const container = document.getElementById('restaurant-container');\n  const figure = document.getElementById('restaurant-img');\n  figure.innerHTML = image.innerHTML;\n  // container.insertBefore(image, container.children[1])\n\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (const key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach((review) => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.querySelector('#navBreadcrumb ul');\n  const li = document.createElement('li');\n  const currentPage = document.createElement('a');\n  currentPage.innerHTML = restaurant.name;\n  currentPage.setAttribute('href', location.href);\n  currentPage.setAttribute('aria-current', 'page');\n  li.appendChild(currentPage);\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url) { url = window.location.href; }\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results) { return null; }\n  if (!results[2]) { return ''; }\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n"]}