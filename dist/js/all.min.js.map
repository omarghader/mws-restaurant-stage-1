{"version":3,"sources":["shared.js","dbhelper.js","main.js","swregister.js"],"names":["responsiveBreakPoints","media","minwidth","maxwidth","imgSuffix","imgCondition","sizes","srcset","responsiveImage","figure","document","restaurant","picture","breakPoint","createElement","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","source","value","className","srcsets","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","push","DBHelper","imageUrlForRestaurant","err","return","length","join","append","image","src","alt","name","figureCaption","innerHTML","lazy","querySelectorAll","console","log","lazyLoad","i","isInViewport","getAttribute","removeAttribute","cleanLazy","Array","prototype","filter","call","l","el","rect","top","window","innerHeight","documentElement","clientHeight","innerWidth","clientWidth","event","func","addEventListener","setLazy","attachEvent","registerListener","dbname","objectStore","open","indexedDB","db","onupgradeneeded","createObjectStore","keyPath","data","initDB","onsuccess","store","result","forEach","resto","callback","tx","transaction","getAll","query","res","oncomplete","getDataFromDB","fetch","DATABASE_URL","then","json","restaurants","catch","storeDataToDB","fetchRestaurants","error","find","r","id","cuisine","results","cuisine_type","neighborhood","neighborhoods","map","v","uniqueNeighborhoods","indexOf","uniqueCuisines","cuisines","dimension","google","maps","Marker","position","latlng","title","url","urlForRestaurant","DROP","updateRestaurants","fetchNeighborhoods","fillNeighborhoodsHTML","arguments","self","select","getElementById","option","fetchCuisines","fillCuisinesHTML","Map","zoom","lat","lng","scrollwheel","cSelect","nSelect","cIndex","selectedIndex","nIndex","item","index","setAttribute","resetRestaurants","fillRestaurantsHTML","markers","m","setMap","ul","createRestaurantHTML","addMarkersToMap","li","address","more","href","marker","mapMarkerForRestaurant","addListener","location","SWService","navigator","serviceWorker","indexController","this","register","reg","controller","waiting","updateReady","trackInstalling","installing","refreshing","reload","_dbPromise","_postsView","showingPosts","indexedDBName","messages","addPosts","reverse","worker","state","postMessage","action","swregister","registerServiceWorker"],"mappings":"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","file":"all.min.js","sourcesContent":["\n\nconst responsiveBreakPoints = [\n  {\n    media: {\n      minwidth: 0,\n      maxwidth: 500,\n    },\n    srcset: [\n      {\n        imgSuffix: 'small',\n        imgCondition: '450w',\n      },\n    ],\n    sizes: [],\n  }, {\n    media: {\n      minwidth: 501,\n      maxwidth: 850,\n    },\n    srcset: [\n      {\n        imgSuffix: 'medium',\n        imgCondition: '550w',\n      },\n    ],\n    sizes: [],\n  }, {\n    media: {\n      minwidth: 851,\n      maxwidth: null,\n    },\n    srcset: [\n      {\n        imgSuffix: 'large',\n        imgCondition: '800w',\n      },\n    ],\n    sizes: [],\n  },\n];\n\nconst responsiveImage = (restaurant) => {\n  const figure = document.createElement('figure');\n  const picture = document.createElement('picture');\n\n  for (const breakPoint of responsiveBreakPoints) {\n    const source = document.createElement('source');\n    source.className = 'lazy';\n\n    source.media = '';\n    if (breakPoint.media.maxwidth && breakPoint.media.minwidth) {\n      source.media += `(min-width: ${breakPoint.media.minwidth}px) and (max-width: ${breakPoint.media.maxwidth}px)`;\n    } else {\n      if (breakPoint.media.minwidth) { source.media += `(min-width: ${breakPoint.media.minwidth}px)`; }\n      if (breakPoint.media.maxwidth) { source.media += `(max-width: ${breakPoint.media.maxwidth}px)`; }\n    }\n\n    const srcsets = [];\n\n    for (const srcset of breakPoint.srcset) {\n      if (srcset.imgSuffix === 'small') { continue; }\n      srcsets.push(`${DBHelper.imageUrlForRestaurant(restaurant, srcset.imgSuffix)}  ${srcset.imgCondition}`);\n    }\n\n    // if there is src set Add\n    if (srcsets.length > 0) {\n      source.srcset = srcsets.join(srcsets, ',');\n      // source.dataset.srcset = srcsets.join(srcsets, ',');\n\n      picture.append(source);\n    }\n  }\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  // image.dataset.src = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  image.alt = `Image of the restaurant ${restaurant.name}`;\n  picture.append(image);\n\n  figure.append(picture);\n\n  const figureCaption = document.createElement('figcaption');\n  figureCaption.innerHTML = restaurant.name;\n  figure.append(figureCaption);\n\n  return figure;\n};\n\n//\nlet lazy = [];\n\n\nfunction setLazy() {\n  // document.getElementById('listing').removeChild(document.getElementById('viewMore'));\n  // document.getElementById('nextPage').removeAttribute('class');\n\n  lazy = document.querySelectorAll('img[data-src]');\n  console.log(`Found ${lazy.length} lazy images`);\n}\n\nfunction lazyLoad() {\n  lazy = document.querySelectorAll('img[data-src]');\n\n  for (let i = 0; i < lazy.length; i++) {\n    if (isInViewport(lazy[i])) {\n      if (lazy[i].getAttribute('data-src')) {\n        lazy[i].src = lazy[i].getAttribute('data-src');\n        lazy[i].removeAttribute('data-src');\n      }\n    }\n  }\n\n  cleanLazy();\n}\n\nfunction cleanLazy() {\n  lazy = Array.prototype.filter.call(lazy, l => l.getAttribute('data-src'));\n}\n\nfunction isInViewport(el) {\n  const rect = el.getBoundingClientRect();\n\n  return (\n    rect.bottom >= 0 &&\n        rect.right >= 0 &&\n        rect.top <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.left <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n}\n\nfunction registerListener(event, func) {\n  if (window.addEventListener) {\n    window.addEventListener(event, func);\n  } else {\n    window.attachEvent(`on${event}`, func);\n  }\n}\n\n\nregisterListener('load', setLazy);\nregisterListener('load', lazyLoad);\nregisterListener('scroll', lazyLoad);\nregisterListener('resize', lazyLoad);\n","/**\n * Common database helper functions.\n */\n\nconst dbname = 'mws';\nconst objectStore = 'mwsObjectStore';\n\n// eslint-disable-next-line\nclass DBHelper {\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   */\n  static get DATABASE_URL() {\n    const port = 1337; // Change this to your server port\n    return `http://localhost:${port}/restaurants`;\n  }\n\n  static initDB() {\n    // This works on all devices/browsers, and uses IndexedDBShim as a final fallback\n    const indexedDB = window.indexedDB; // eslint-disable-line\n\n    // Open (or create) the database\n    const open = indexedDB.open(dbname, 1);\n\n    // Create the schema\n    open.onupgradeneeded = function onupgradeneeded() {\n      const db = open.result;\n      db.createObjectStore(objectStore, { keyPath: 'id' });\n      // var index = store.createIndex(\"NameIndex\", [\"name.last\", \"name.first\"]);\n    };\n\n    return open;\n  }\n\n  static storeDataToDB(data) {\n    const open = DBHelper.initDB();\n\n    open.onsuccess = function onsuccess() {\n      // Start a new transaction\n      const db = open.result;\n      const tx = db.transaction(objectStore, 'readwrite');\n      const store = tx.objectStore(objectStore);\n\n      data.forEach((resto) => {\n        store.put(resto);\n      });\n    };\n  }\n\n  static getDataFromDB(query, callback) {\n    const open = DBHelper.initDB();\n\n    open.onsuccess = function onsuccess() {\n      // Start a new transaction\n      const db = open.result;\n      const tx = db.transaction(objectStore, 'readwrite');\n      const store = tx.objectStore(objectStore);\n\n      let res = store.getAll();\n      if (query) {\n        res = store.get(query);\n      }\n\n      res.onsuccess = function resonsuccess() {\n        callback(res.result);\n      };\n\n      // Close the db when the transaction is done\n      tx.oncomplete = function oncomplete() {\n        db.close();\n      };\n    };\n  }\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    DBHelper.getDataFromDB(null, (data) => {\n      if (data) {\n        console.log('[[DATAFROMDB]]', data);\n        callback(null, data);\n      }\n\n      // eslint-disable-next-line\n      fetch(DBHelper.DATABASE_URL).then(res => res.json()).then((restaurants) => {\n        callback(null, restaurants);\n        DBHelper.storeDataToDB(restaurants);\n      }).catch((err) => {\n        const error = ('Request failed', err);\n        callback(error, null);\n      });\n    });\n  }\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        const restaurant = restaurants.find(r => r.id === id);\n        if (restaurant) { // Got the restaurant\n          callback(null, restaurant);\n        } else { // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type === cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood === neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants;\n        if (cuisine !== 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type === cuisine);\n        }\n        if (neighborhood !== 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood === neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(restaurant, dimension) {\n    switch (dimension) {\n      case 'large':\n        return (`/img/${restaurant.id}-large.jpg`);\n      case 'medium':\n        return (`/img/${restaurant.id}-medium.jpg`);\n      default:\n        return (`/img/${restaurant.id}-small.jpg`);\n    }\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    // eslint-disable-next-line\n    if (!window.google) { return; }\n\n    // eslint-disable-next-line\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map,\n      animation: google.maps.Animation.DROP,//eslint-disable-line\n    });\n    // eslint-disable-next-line\n    return marker;\n  }\n}\n","let restaurants,\n  neighborhoods,\n  cuisines;\nlet map;\nconst markers = [];\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  updateRestaurants();\n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach((neighborhood) => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n\n    // Accessibility\n    option.setAttribute('role', 'option');\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach((cuisine) => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  const loc = {\n    lat: 40.722216,\n    lng: -73.987501,\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false,\n  });\n\n  // updateRestaurants();\n};\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  // Accessibility\n  if (cIndex > 0) {\n    cSelect.querySelectorAll('option').forEach((item, index) => {\n      if (index === cIndex) {\n        item.setAttribute('aria-selected', 'true');\n      } else {\n        item.removeAttribute('aria-selected');\n      }\n    });\n  }\n\n  if (nIndex > 0) {\n    nSelect.querySelectorAll('option').forEach((item, index) => {\n      if (index === nIndex) {\n        item.setAttribute('aria-selected', 'true');\n      } else {\n        item.removeAttribute('aria-selected');\n      }\n    });\n  }\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  });\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach((restaurant, index) => {\n    ul.append(createRestaurantHTML(restaurant, index));\n  });\n  if (window.google) {\n    console.log('filling markers');\n    addMarkersToMap();\n  }\n};\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = (restaurant, index) => {\n  const li = document.createElement('li');\n\n  const figure = document.createElement('figure');\n  const picture = document.createElement('picture');\n\n  for (const breakPoint of responsiveBreakPoints) {\n    const source = document.createElement('source');\n    source.media = '';\n    if (breakPoint.media.maxwidth && breakPoint.media.minwidth) { source.media += `(min-width: ${breakPoint.media.minwidth}px) and (max-width: ${breakPoint.media.maxwidth}px)`; } else {\n      if (breakPoint.media.minwidth) source.media += `(min-width: ${breakPoint.media.minwidth}px)`;\n      if (breakPoint.media.maxwidth) source.media += `(max-width: ${breakPoint.media.maxwidth}px)`;\n    }\n\n    const srcsets = [];\n\n    for (const srcset of breakPoint.srcset) {\n      if (srcset.imgSuffix === 'small') continue;\n      srcsets.push(`${DBHelper.imageUrlForRestaurant(restaurant, srcset.imgSuffix)}  ${srcset.imgCondition}`);\n    }\n\n    // if there is src set Add\n    if (srcsets.length > 0) {\n      source.srcset = srcsets.join(srcsets, ',');\n      // source.dataset.srcset = srcsets.join(srcsets, ',');\n\n      picture.append(source);\n    }\n  }\n\n  const image = document.createElement('img');\n  // image.src = '/img/restaurant.png';\n\n  image.className = 'restaurant-img lazy';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  // image.dataset.src = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n\n  image.alt = `Image of the restaurant ${restaurant.name}`;\n  picture.append(image);\n\n  figure.append(picture);\n\n  const figureCaption = document.createElement('figcaption');\n  figureCaption.innerHTML = restaurant.name;\n  figure.append(figureCaption);\n\n\n  li.append(figure); // TODO : append figure\n\n  const name = document.createElement('h2');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  more.setAttribute('tabindex', index + 3);\n  li.append(more);\n\n  // Set Tabindex\n  return li;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach((restaurant) => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url;\n    });\n    self.markers.push(marker);\n  });\n};\n","class SWService {\n  registerServiceWorker() {\n    if (!navigator.serviceWorker) return;\n\n    const indexController = this;\n\n    navigator.serviceWorker.register('/sw.js').then((reg) => {\n      if (!navigator.serviceWorker.controller) {\n        return;\n      }\n\n      if (reg.waiting) {\n        indexController.updateReady(reg.waiting);\n        return;\n      }\n\n      if (reg.installing) {\n        indexController.trackInstalling(reg.installing);\n        return;\n      }\n\n      reg.addEventListener('updatefound', () => {\n        indexController.trackInstalling(reg.installing);\n      });\n    });\n\n    // Ensure refresh is only called once.\n    // This works around a bug in \"force update on reload\".\n    let refreshing;\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (refreshing) return;\n      window.location.reload();\n      refreshing = true;\n    });\n  }\n\n  showCachedMessages() {\n    const indexController = this;\n\n    return this._dbPromise.then((db) => {\n      // if we're already showing posts, eg shift-refresh\n      // or the very first load, there's no point fetching\n      // posts from IDB\n      if (!db || indexController._postsView.showingPosts()) return;\n\n      const index = db.transaction(indexedDBName)\n        .objectStore(indexedDBName).index('by-date');\n\n      return index.getAll().then((messages) => {\n        indexController._postsView.addPosts(messages.reverse());\n      });\n    });\n  }\n\n  trackInstalling(worker) {\n    const indexController = this;\n    worker.addEventListener('statechange', () => {\n      if (worker.state == 'installed') {\n        indexController.updateReady(worker);\n      }\n    });\n  }\n\n\n  updateReady(worker) {\n    worker.postMessage({\n      action: 'skipWaiting',\n    });\n  }\n}\n\n\nconst swregister = new SWService();\nswregister.registerServiceWorker();\n"]}