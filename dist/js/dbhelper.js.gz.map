{"version":3,"sources":["dbhelper.js"],"names":["dbname","objectStore","DBHelper","open","window","indexedDB","db","onupgradeneeded","createObjectStore","keyPath","data","initDB","onsuccess","store","result","forEach","resto","callback","tx","transaction","getAll","query","res","oncomplete","getDataFromDB","fetch","DATABASE_URL","then","json","restaurants","storeDataToDB","err","fetchRestaurants","error","restaurant","find","r","id","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","uniqueCuisines","cuisines","dimension","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","DROP"],"mappings":"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","file":"dbhelper.js.gz","sourcesContent":["/**\n * Common database helper functions.\n */\n\nconst dbname = 'mws';\nconst objectStore = 'mwsObjectStore';\n\n// eslint-disable-next-line\nclass DBHelper {\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   */\n  static get DATABASE_URL() {\n    const port = 1337; // Change this to your server port\n    return `http://localhost:${port}/restaurants`;\n  }\n\n  static initDB() {\n    // This works on all devices/browsers, and uses IndexedDBShim as a final fallback\n    const indexedDB = window.indexedDB; // eslint-disable-line\n\n    // Open (or create) the database\n    const open = indexedDB.open(dbname, 1);\n\n    // Create the schema\n    open.onupgradeneeded = function onupgradeneeded() {\n      const db = open.result;\n      db.createObjectStore(objectStore, { keyPath: 'id' });\n      // var index = store.createIndex(\"NameIndex\", [\"name.last\", \"name.first\"]);\n    };\n\n    return open;\n  }\n\n  static storeDataToDB(data) {\n    const open = DBHelper.initDB();\n\n    open.onsuccess = function onsuccess() {\n      // Start a new transaction\n      const db = open.result;\n      const tx = db.transaction(objectStore, 'readwrite');\n      const store = tx.objectStore(objectStore);\n\n      data.forEach((resto) => {\n        store.put(resto);\n      });\n    };\n  }\n\n  static getDataFromDB(query, callback) {\n    const open = DBHelper.initDB();\n\n    open.onsuccess = function onsuccess() {\n      // Start a new transaction\n      const db = open.result;\n      const tx = db.transaction(objectStore, 'readwrite');\n      const store = tx.objectStore(objectStore);\n\n      let res = store.getAll();\n      if (query) {\n        res = store.get(query);\n      }\n\n      res.onsuccess = function resonsuccess() {\n        callback(res.result);\n      };\n\n      // Close the db when the transaction is done\n      tx.oncomplete = function oncomplete() {\n        db.close();\n      };\n    };\n  }\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    DBHelper.getDataFromDB(null, (data) => {\n      if (data) {\n        callback(null, data);\n      }\n\n      // eslint-disable-next-line\n      fetch(DBHelper.DATABASE_URL).then(res => res.json()).then((restaurants) => {\n        callback(null, restaurants);\n        DBHelper.storeDataToDB(restaurants);\n      }).catch((err) => {\n        const error = ('Request failed', err);\n        callback(error, null);\n      });\n    });\n  }\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        const restaurant = restaurants.find(r => r.id === id);\n        if (restaurant) { // Got the restaurant\n          callback(null, restaurant);\n        } else { // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type === cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood === neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants;\n        if (cuisine !== 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type === cuisine);\n        }\n        if (neighborhood !== 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood === neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(restaurant, dimension) {\n    switch (dimension) {\n      case 'large':\n        return (`/img/${restaurant.id}-large.jpg`);\n      case 'medium':\n        return (`/img/${restaurant.id}-medium.jpg`);\n      default:\n        return (`/img/${restaurant.id}-small.jpg`);\n    }\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    // eslint-disable-next-line\n    if (!window.google) { return; }\n\n    // eslint-disable-next-line\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map,\n      animation: google.maps.Animation.DROP,//eslint-disable-line\n    });\n    // eslint-disable-next-line\n    return marker;\n  }\n}\n"]}