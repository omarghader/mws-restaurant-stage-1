{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","document","addEventListener","event","fetchNeighborhoods","DBHelper","error","console","fillNeighborhoodsHTML","arguments","length","undefined","self","select","getElementById","createElement","option","innerHTML","neighborhood","value","fetchCuisines","fillCuisinesHTML","forEach","cuisine","append","map","google","maps","Map","zoom","window","lat","lng","scrollwheel","updateRestaurants","nSelect","cIndex","cSelect","selectedIndex","nIndex","item","index","removeAttribute","setAttribute","querySelectorAll","resetRestaurants","fillRestaurantsHTML","markers","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","figure","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","responsiveBreakPoints","Symbol","iterator","next","done","breakPoint","source","media","maxwidth","minwidth","srcsets","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","picture","srcset","imgSuffix","push","imageUrlForRestaurant","imgCondition","err","return","join","image","className","dataset","alt","name","figureCaption","li","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\n  neighborhoods,\n  cuisines;\nlet map;\nconst markers = [];\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  fetchNeighborhoods();\n  fetchCuisines();\n  updateRestaurants();\n});\n\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) { // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach((neighborhood) => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n\n    // Accessibility\n    option.setAttribute('role', 'option');\n    select.append(option);\n  });\n};\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach((cuisine) => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  const loc = {\n    lat: 40.722216,\n    lng: -73.987501,\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false,\n  });\n\n  updateRestaurants();\n};\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  // Accessibility\n  if (cIndex > 0) {\n    cSelect.querySelectorAll('option').forEach((item, index) => {\n      if (index === cIndex) {\n        item.setAttribute('aria-selected', 'true');\n      } else {\n        item.removeAttribute('aria-selected');\n      }\n    });\n  }\n\n  if (nIndex > 0) {\n    nSelect.querySelectorAll('option').forEach((item, index) => {\n      if (index === nIndex) {\n        item.setAttribute('aria-selected', 'true');\n      } else {\n        item.removeAttribute('aria-selected');\n      }\n    });\n  }\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  });\n};\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = (restaurants) => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach((restaurant, index) => {\n    ul.append(createRestaurantHTML(restaurant, index));\n  });\n  if (window.google) {\n    addMarkersToMap();\n  }\n};\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = (restaurant, index) => {\n  const li = document.createElement('li');\n\n  const figure = document.createElement('figure');\n  const picture = document.createElement('picture');\n\n  for (const breakPoint of responsiveBreakPoints) {\n    const source = document.createElement('source');\n    source.media = '';\n    if (breakPoint.media.maxwidth && breakPoint.media.minwidth) { source.media += `(min-width: ${breakPoint.media.minwidth}px) and (max-width: ${breakPoint.media.maxwidth}px)`; } else {\n      if (breakPoint.media.minwidth) source.media += `(min-width: ${breakPoint.media.minwidth}px)`;\n      if (breakPoint.media.maxwidth) source.media += `(max-width: ${breakPoint.media.maxwidth}px)`;\n    }\n\n    const srcsets = [];\n\n    for (const srcset of breakPoint.srcset) {\n      if (srcset.imgSuffix === 'small') continue;\n      srcsets.push(`${DBHelper.imageUrlForRestaurant(restaurant, srcset.imgSuffix)}  ${srcset.imgCondition}`);\n    }\n\n    // if there is src set Add\n    if (srcsets.length > 0) {\n      // source.srcset = srcsets.join(srcsets, ',');\n      source.dataset.srcset = srcsets.join(srcsets, ',');\n      picture.append(source);\n    }\n  }\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img lazy';\n  // image.src = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  image.dataset.src = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n\n  image.alt = `Image of the restaurant ${restaurant.name}`;\n  picture.append(image);\n\n  figure.append(picture);\n\n  const figureCaption = document.createElement('figcaption');\n  figureCaption.innerHTML = restaurant.name;\n  figure.append(figureCaption);\n\n\n  li.append(figure); // TODO : append figure\n\n  const name = document.createElement('h2');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  more.setAttribute('tabindex', index + 3);\n  li.append(more);\n\n  // Set Tabindex\n  return li;\n};\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach((restaurant) => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url;\n    });\n    self.markers.push(marker);\n  });\n};\n"]}