{"version":3,"sources":["shared.js","dbhelper.js","restaurant_info.js","swregister.js"],"names":["responsiveBreakPoints","media","minwidth","maxwidth","imgSuffix","imgCondition","sizes","srcset","responsiveImage","figure","document","restaurant","picture","breakPoint","createElement","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","source","value","className","srcsets","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","push","DBHelper","imageUrlForRestaurant","err","return","length","join","append","image","src","alt","name","figureCaption","innerHTML","lazy","querySelectorAll","console","log","lazyLoad","i","isInViewport","getAttribute","removeAttribute","cleanLazy","Array","prototype","filter","call","l","el","rect","top","window","innerHeight","documentElement","clientHeight","innerWidth","clientWidth","event","func","addEventListener","setLazy","attachEvent","registerListener","dbname","objectStore","open","indexedDB","db","onupgradeneeded","createObjectStore","keyPath","data","initDB","onsuccess","store","result","forEach","resto","callback","tx","transaction","getAll","query","res","oncomplete","getDataFromDB","fetch","DATABASE_URL","then","json","restaurants","catch","storeDataToDB","id","fetchRestaurants","error","find","r","cuisine","results","cuisine_type","neighborhood","neighborhoods","map","v","uniqueNeighborhoods","indexOf","uniqueCuisines","cuisines","dimension","google","maps","Marker","position","latlng","title","url","urlForRestaurant","DROP","initMap","fetchRestaurantFromURL","self","Map","getElementById","center","scrollwheel","onload","fillBreadcrumb","mapMarkerForRestaurant","getParameterByName","fetchRestaurantById","fillRestaurantHTML","arguments","address","container","operating_hours","fillRestaurantHoursHTML","operatingHours","fillReviewsHTML","key","row","day","time","hours","appendChild","reviews","noReviews","createReviewHTML","review","ul","li","date","rating","comments","currentPage","setAttribute","location","href","breadcrumb","querySelector","replace","SWService","navigator","serviceWorker","indexController","this","register","reg","controller","waiting","updateReady","trackInstalling","installing","refreshing","reload","_dbPromise","_postsView","showingPosts","indexedDBName","index","messages","addPosts","reverse","worker","state","postMessage","action","swregister","registerServiceWorker"],"mappings":"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","file":"info.min.js","sourcesContent":["\n\nconst responsiveBreakPoints = [\n  {\n    media: {\n      minwidth: 0,\n      maxwidth: 500,\n    },\n    srcset: [\n      {\n        imgSuffix: 'small',\n        imgCondition: '450w',\n      },\n    ],\n    sizes: [],\n  }, {\n    media: {\n      minwidth: 501,\n      maxwidth: 850,\n    },\n    srcset: [\n      {\n        imgSuffix: 'medium',\n        imgCondition: '550w',\n      },\n    ],\n    sizes: [],\n  }, {\n    media: {\n      minwidth: 851,\n      maxwidth: null,\n    },\n    srcset: [\n      {\n        imgSuffix: 'large',\n        imgCondition: '800w',\n      },\n    ],\n    sizes: [],\n  },\n];\n\nconst responsiveImage = (restaurant) => {\n  const figure = document.createElement('figure');\n  const picture = document.createElement('picture');\n\n  for (const breakPoint of responsiveBreakPoints) {\n    const source = document.createElement('source');\n    source.className = 'lazy';\n\n    source.media = '';\n    if (breakPoint.media.maxwidth && breakPoint.media.minwidth) {\n      source.media += `(min-width: ${breakPoint.media.minwidth}px) and (max-width: ${breakPoint.media.maxwidth}px)`;\n    } else {\n      if (breakPoint.media.minwidth) { source.media += `(min-width: ${breakPoint.media.minwidth}px)`; }\n      if (breakPoint.media.maxwidth) { source.media += `(max-width: ${breakPoint.media.maxwidth}px)`; }\n    }\n\n    const srcsets = [];\n\n    for (const srcset of breakPoint.srcset) {\n      if (srcset.imgSuffix === 'small') { continue; }\n      srcsets.push(`${DBHelper.imageUrlForRestaurant(restaurant, srcset.imgSuffix)}  ${srcset.imgCondition}`);\n    }\n\n    // if there is src set Add\n    if (srcsets.length > 0) {\n      source.srcset = srcsets.join(srcsets, ',');\n      // source.dataset.srcset = srcsets.join(srcsets, ',');\n\n      picture.append(source);\n    }\n  }\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  // image.dataset.src = DBHelper.imageUrlForRestaurant(restaurant, 'small');\n  image.alt = `Image of the restaurant ${restaurant.name}`;\n  picture.append(image);\n\n  figure.append(picture);\n\n  const figureCaption = document.createElement('figcaption');\n  figureCaption.innerHTML = restaurant.name;\n  figure.append(figureCaption);\n\n  return figure;\n};\n\n//\nlet lazy = [];\n\n\nfunction setLazy() {\n  // document.getElementById('listing').removeChild(document.getElementById('viewMore'));\n  // document.getElementById('nextPage').removeAttribute('class');\n\n  lazy = document.querySelectorAll('img[data-src]');\n  console.log(`Found ${lazy.length} lazy images`);\n}\n\nfunction lazyLoad() {\n  lazy = document.querySelectorAll('img[data-src]');\n\n  for (let i = 0; i < lazy.length; i++) {\n    if (isInViewport(lazy[i])) {\n      if (lazy[i].getAttribute('data-src')) {\n        lazy[i].src = lazy[i].getAttribute('data-src');\n        lazy[i].removeAttribute('data-src');\n      }\n    }\n  }\n\n  cleanLazy();\n}\n\nfunction cleanLazy() {\n  lazy = Array.prototype.filter.call(lazy, l => l.getAttribute('data-src'));\n}\n\nfunction isInViewport(el) {\n  const rect = el.getBoundingClientRect();\n\n  return (\n    rect.bottom >= 0 &&\n        rect.right >= 0 &&\n        rect.top <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.left <= (window.innerWidth || document.documentElement.clientWidth)\n  );\n}\n\nfunction registerListener(event, func) {\n  if (window.addEventListener) {\n    window.addEventListener(event, func);\n  } else {\n    window.attachEvent(`on${event}`, func);\n  }\n}\n\n\nregisterListener('load', setLazy);\nregisterListener('load', lazyLoad);\nregisterListener('scroll', lazyLoad);\nregisterListener('resize', lazyLoad);\n","/**\n * Common database helper functions.\n */\n\nconst dbname = 'mws';\nconst objectStore = 'mwsObjectStore';\n\n// eslint-disable-next-line\nclass DBHelper {\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   */\n  static get DATABASE_URL() {\n    const port = 1337; // Change this to your server port\n    return `http://localhost:${port}/restaurants`;\n  }\n\n  static initDB() {\n    // This works on all devices/browsers, and uses IndexedDBShim as a final fallback\n    const indexedDB = window.indexedDB; // eslint-disable-line\n\n    // Open (or create) the database\n    const open = indexedDB.open(dbname, 1);\n\n    // Create the schema\n    open.onupgradeneeded = function onupgradeneeded() {\n      const db = open.result;\n      db.createObjectStore(objectStore, { keyPath: 'id' });\n      // var index = store.createIndex(\"NameIndex\", [\"name.last\", \"name.first\"]);\n    };\n\n    return open;\n  }\n\n  static storeDataToDB(data) {\n    const open = DBHelper.initDB();\n\n    open.onsuccess = function onsuccess() {\n      // Start a new transaction\n      const db = open.result;\n      const tx = db.transaction(objectStore, 'readwrite');\n      const store = tx.objectStore(objectStore);\n\n      data.forEach((resto) => {\n        store.put(resto);\n      });\n    };\n  }\n\n  static getDataFromDB(query, callback) {\n    const open = DBHelper.initDB();\n\n    open.onsuccess = function onsuccess() {\n      // Start a new transaction\n      const db = open.result;\n      const tx = db.transaction(objectStore, 'readwrite');\n      const store = tx.objectStore(objectStore);\n\n      let res = store.getAll();\n      if (query) {\n        res = store.get(parseInt(query, 10));\n      }\n\n      res.onsuccess = function resonsuccess() {\n        callback(res.result);\n      };\n\n      // Close the db when the transaction is done\n      tx.oncomplete = function oncomplete() {\n        db.close();\n      };\n    };\n  }\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    DBHelper.getDataFromDB(null, (data) => {\n      if (data) {\n        console.log('[[DATAFROMDB]]', data);\n        callback(null, data);\n      }\n\n      // eslint-disable-next-line\n      fetch(DBHelper.DATABASE_URL).then(res => res.json()).then((restaurants) => {\n        callback(null, restaurants);\n        DBHelper.storeDataToDB(restaurants);\n      }).catch((err) => {\n        const error = ('Request failed', err);\n        callback(error, null);\n      });\n    });\n  }\n\n  /**\n   * Fetch a restaurant by its ID.\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.getDataFromDB(id, (data) => {\n      console.log('data', id, data);\n      if (data) {\n        console.log('[[DATAFROMDB]]', data);\n        callback(null, data);\n        return;\n      }\n\n      DBHelper.fetchRestaurants((error, restaurants) => {\n        if (error) {\n          callback(error, null);\n        } else {\n          console.log(id, restaurants);\n          const restaurant = restaurants.find(r => r.id === id);\n          if (restaurant) { // Got the restaurant\n            callback(null, restaurant);\n          } else { // Restaurant does not exist in the database\n            callback('Restaurant does not exist', null);\n          }\n        }\n      });\n    });\n\n    // fetch all restaurants with proper error handling.\n    // DBHelper.fetchRestaurants((error, restaurants) => {\n    //   if (error) {\n    //     callback(error, null);\n    //   } else {\n    //     console.log(id, restaurants);\n    //     window.restaurants = restaurants;\n    //     const restaurant = restaurants.find(r => r.id === id);\n    //     if (restaurant) { // Got the restaurant\n    //       callback(null, restaurant);\n    //     } else { // Restaurant does not exist in the database\n    //       callback('Restaurant does not exist', null);\n    //     }\n    //   }\n    // });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type === cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood === neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants;\n        if (cuisine !== 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type === cuisine);\n        }\n        if (neighborhood !== 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood === neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(restaurant, dimension) {\n    switch (dimension) {\n      case 'large':\n        return (`/img/${restaurant.id}-large.jpg`);\n      case 'medium':\n        return (`/img/${restaurant.id}-medium.jpg`);\n      default:\n        return (`/img/${restaurant.id}-small.jpg`);\n    }\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    // eslint-disable-next-line\n    if (!window.google) { return; }\n\n    // eslint-disable-next-line\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map,\n      animation: google.maps.Animation.DROP,//eslint-disable-line\n    });\n    // eslint-disable-next-line\n    return marker;\n  }\n}\n","let restaurant;\nlet map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false,\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n};\n\nwindow.onload = () => {\n  if (!window.google) {\n    fetchRestaurantFromURL((error, restaurant) => {\n      if (error) { // Got an error!\n        console.error(error);\n      } else {\n        fillBreadcrumb();\n        DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n      }\n    });\n  }\n};\n\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant);\n    return;\n  }\n  const id = getParameterByName('id');\n  console.log('[[id]]', id);\n  if (!id) { // no id found in URL\n    console.log('[[IDNOTFOUND]]', id);\n    const error = 'No restaurant id in URL';\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant);\n    });\n  }\n};\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  // const image = document.getElementById('restaurant-img');\n  // image.className = 'restaurant-img'\n  // image.src = DBHelper.imageUrlForRestaurant(restaurant);\n\n  const image = responsiveImage(restaurant);\n  const container = document.getElementById('restaurant-container');\n  const figure = document.getElementById('restaurant-img');\n  figure.innerHTML = image.innerHTML;\n  // container.insertBefore(image, container.children[1])\n\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n};\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (const key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n};\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach((review) => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n};\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n};\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.querySelector('#navBreadcrumb ul');\n  const li = document.createElement('li');\n  const currentPage = document.createElement('a');\n  currentPage.innerHTML = restaurant.name;\n  currentPage.setAttribute('href', location.href);\n  currentPage.setAttribute('aria-current', 'page');\n  li.appendChild(currentPage);\n  breadcrumb.appendChild(li);\n};\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url) { url = window.location.href; }\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results) { return null; }\n  if (!results[2]) { return ''; }\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n};\n","class SWService {\n  registerServiceWorker() {\n    if (!navigator.serviceWorker) return;\n\n    const indexController = this;\n\n    navigator.serviceWorker.register('/sw.js').then((reg) => {\n      if (!navigator.serviceWorker.controller) {\n        return;\n      }\n\n      if (reg.waiting) {\n        indexController.updateReady(reg.waiting);\n        return;\n      }\n\n      if (reg.installing) {\n        indexController.trackInstalling(reg.installing);\n        return;\n      }\n\n      reg.addEventListener('updatefound', () => {\n        indexController.trackInstalling(reg.installing);\n      });\n    });\n\n    // Ensure refresh is only called once.\n    // This works around a bug in \"force update on reload\".\n    let refreshing;\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (refreshing) return;\n      window.location.reload();\n      refreshing = true;\n    });\n  }\n\n  showCachedMessages() {\n    const indexController = this;\n\n    return this._dbPromise.then((db) => {\n      // if we're already showing posts, eg shift-refresh\n      // or the very first load, there's no point fetching\n      // posts from IDB\n      if (!db || indexController._postsView.showingPosts()) return;\n\n      const index = db.transaction(indexedDBName)\n        .objectStore(indexedDBName).index('by-date');\n\n      return index.getAll().then((messages) => {\n        indexController._postsView.addPosts(messages.reverse());\n      });\n    });\n  }\n\n  trackInstalling(worker) {\n    const indexController = this;\n    worker.addEventListener('statechange', () => {\n      if (worker.state == 'installed') {\n        indexController.updateReady(worker);\n      }\n    });\n  }\n\n\n  updateReady(worker) {\n    worker.postMessage({\n      action: 'skipWaiting',\n    });\n  }\n}\n\n\nconst swregister = new SWService();\nswregister.registerServiceWorker();\n"]}